// https://www.learncpp.com/cpp-tutorial/introduction-to-constructors/

#include <iostream>

class Foo
{
public:
    // Because constructors are functions, they can be overloaded.

    /*
    Foo(int x = 10, int y = 20) // constructor  // has default arguments // error (Foo foo {};): class "Foo" has more than one default constructor : both this constructor and Foo() can be used
        : m_x {x}
        , m_y {y}
    {
        // The bodies of constructors functions are most often left empty.
        std::cout << "Foo(" << x << ", " << y << ") constructed.\n";
    }
    */

    Foo(int x, int y) // constructor
        : m_x {x}
        , m_y {y}
    {
        // The bodies of constructors functions are most often left empty.
        std::cout << "Foo(" << x << ", " << y << ") constructed.\n";
    }

    Foo() // default constructor
        : m_x {50}
        , m_y {100}
    {
        std::cout << "Foo default constructed\n";
    }

    /*
    // if no constructor is declared, default constructor will be implicitly generated
    Foo() // implicitly generated default constructor
    {
    }
    */

    /* 
    // generate an explicitly defaulted default constructor
    // as we've declared a constructor, an implicit default constructor would not be generated by default, but we can explicitly ask it to generate one
    // Prefer an explicitly defaulted default constructor (= default) over a default constructor with an empty body. Prefer "= default" over empty user-defined constructor
    Foo() = default; // error: constructor cannot be redeclared (above snippet Foo() // default constructor)
    */

    int getX() const { return m_x; }
    int getY() const { return m_y; }

private:
    int m_x {}; // default member initializer (will be ignored)
    int m_y {}; // default member initializer (will be ignored)

};

int main()
{
    // Foo foo {10, 20};
    Foo foo {}; // equivalent to Foo foo; prefer Foo foo {};

    std::cout << "Foo(" << foo.getX() << ", " << foo.getY() << ")\n";

    return 0;
}